[ID 6856]
Introduction to Smart Contracts 
A Simple Smart Contract 
Storage Example 
[Pragmas](layout-of-source-files.html#pragma)
are common instructions for compilers about how to treat the
source code (e.g.
[pragma once](https://en.wikipedia.org/wiki/Pragma_once)
).
A contract in the sense of Solidity is a collection of code (its
*functions*
) and
data (its
*state*
) that resides at a specific address on the Ethereum
blockchain. The line
```
uint storedData;
```
declares a state variable called
```
storedData
```
of
type
```
uint
```
(
*u*
nsigned
*int*
eger of
*256*
bits). You can think of it as a single slot
in a database that you can query and alter by calling functions of the
code that manages the database. In this example, the contract defines the
functions
```
set
```
and
```
get
```
that can be used to modify
or retrieve the value of the variable.
--------------------------------------------------------------------------------
[ID 6896]
Introduction to Smart Contracts 
A Simple Smart Contract 
Storage Example 
[Pragmas](layout-of-source-files.html#pragma)
are common instructions for compilers about how to treat the
source code (e.g.
[pragma once](https://en.wikipedia.org/wiki/Pragma_once)
).
A contract in the sense of Solidity is a collection of code (its
*functions*
) and
data (its
*state*
) that resides at a specific address on the Ethereum
blockchain. The line
```
uint storedData;
```
declares a state variable called
```
storedData
```
of
type
```
uint
```
(
*u*
nsigned
*int*
eger of
*256*
bits). You can think of it as a single slot
in a database that you can query and alter by calling functions of the
code that manages the database. In this example, the contract defines the
functions
```
set
```
and
```
get
```
that can be used to modify
or retrieve the value of the variable.
--------------------------------------------------------------------------------
[ID 6776]
Introduction to Smart Contracts 
A Simple Smart Contract 
Storage Example 
[Pragmas](layout-of-source-files.html#pragma)
are common instructions for compilers about how to treat the
source code (e.g.
[pragma once](https://en.wikipedia.org/wiki/Pragma_once)
).
A contract in the sense of Solidity is a collection of code (its
*functions*
) and
data (its
*state*
) that resides at a specific address on the Ethereum
blockchain. The line
```
uint storedData;
```
declares a state variable called
```
storedData
```
of
type
```
uint
```
(
*u*
nsigned
*int*
eger of
*256*
bits). You can think of it as a single slot
in a database that you can query and alter by calling functions of the
code that manages the database. In this example, the contract defines the
functions
```
set
```
and
```
get
```
that can be used to modify
or retrieve the value of the variable.
--------------------------------------------------------------------------------
[ID 6816]
Introduction to Smart Contracts 
A Simple Smart Contract 
Storage Example 
[Pragmas](layout-of-source-files.html#pragma)
are common instructions for compilers about how to treat the
source code (e.g.
[pragma once](https://en.wikipedia.org/wiki/Pragma_once)
).
A contract in the sense of Solidity is a collection of code (its
*functions*
) and
data (its
*state*
) that resides at a specific address on the Ethereum
blockchain. The line
```
uint storedData;
```
declares a state variable called
```
storedData
```
of
type
```
uint
```
(
*u*
nsigned
*int*
eger of
*256*
bits). You can think of it as a single slot
in a database that you can query and alter by calling functions of the
code that manages the database. In this example, the contract defines the
functions
```
set
```
and
```
get
```
that can be used to modify
or retrieve the value of the variable.
--------------------------------------------------------------------------------
[ID 6936]
Introduction to Smart Contracts 
A Simple Smart Contract 
Storage Example 
[Pragmas](layout-of-source-files.html#pragma)
are common instructions for compilers about how to treat the
source code (e.g.
[pragma once](https://en.wikipedia.org/wiki/Pragma_once)
).
A contract in the sense of Solidity is a collection of code (its
*functions*
) and
data (its
*state*
) that resides at a specific address on the Ethereum
blockchain. The line
```
uint storedData;
```
declares a state variable called
```
storedData
```
of
type
```
uint
```
(
*u*
nsigned
*int*
eger of
*256*
bits). You can think of it as a single slot
in a database that you can query and alter by calling functions of the
code that manages the database. In this example, the contract defines the
functions
```
set
```
and
```
get
```
that can be used to modify
or retrieve the value of the variable.
--------------------------------------------------------------------------------
